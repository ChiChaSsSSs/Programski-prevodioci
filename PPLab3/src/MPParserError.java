
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Dec 02 10:50:38 CET 2024
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Mon Dec 02 10:50:38 CET 2024
  */
public class MPParserError extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParserError() {super();}

  /** Constructor which sets the default scanner. */
  public MPParserError(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\003\006\000\002\003" +
    "\003\000\002\003\004\000\002\003\005\000\002\003\006" +
    "\000\002\004\006\000\002\004\006\000\002\005\004\000" +
    "\002\005\002\000\002\006\005\000\002\006\005\000\002" +
    "\007\003\000\002\007\005\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\004" +
    "\000\002\011\003\000\002\012\003\000\002\012\006\000" +
    "\002\012\006\000\002\012\003\000\002\013\017\000\002" +
    "\013\007\000\002\013\015\000\002\013\017\000\002\014" +
    "\005\000\002\014\003\000\002\015\005\000\002\015\004" +
    "\000\002\015\003\000\002\016\005\000\002\016\004\000" +
    "\002\016\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\006\003\005\004\006\001\002\000\004\002" +
    "\115\001\002\000\004\002\uffff\001\002\000\006\003\007" +
    "\005\010\001\002\000\004\002\ufffe\001\002\000\006\003" +
    "\012\006\011\001\002\000\006\003\013\007\015\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\ufffc\001\002\000" +
    "\004\002\000\001\002\000\020\007\ufff8\012\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\021\ufff8\001\002\000\020\007" +
    "\015\012\027\014\020\015\032\016\031\017\022\021\024" +
    "\001\002\000\004\012\107\001\002\000\004\012\ufff3\001" +
    "\002\000\016\003\uffea\007\uffea\010\uffea\012\uffea\021\uffea" +
    "\022\uffea\001\002\000\004\012\ufff0\001\002\000\014\003" +
    "\104\007\015\010\106\012\027\021\024\001\002\000\004" +
    "\005\065\001\002\000\020\007\ufff9\012\ufff9\014\ufff9\015" +
    "\ufff9\016\ufff9\017\ufff9\021\ufff9\001\002\000\014\003\uffee" +
    "\007\uffee\010\uffee\012\uffee\021\uffee\001\002\000\004\020" +
    "\033\001\002\000\016\003\uffed\007\uffed\010\uffed\012\uffed" +
    "\021\uffed\022\uffed\001\002\000\004\012\ufff1\001\002\000" +
    "\004\012\ufff2\001\002\000\010\005\042\012\035\033\036" +
    "\001\002\000\014\003\uffe1\006\uffe1\011\uffe1\023\uffe1\024" +
    "\uffe1\001\002\000\030\003\uffd7\006\uffd7\011\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\001\002\000\030\003\uffd6\006\uffd6\011\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\001\002\000\030\003\057\006\uffde\011\uffde\023\uffde" +
    "\024\uffde\025\056\026\061\027\055\030\063\031\060\032" +
    "\062\001\002\000\010\003\052\011\053\023\045\001\002" +
    "\000\014\003\050\006\uffe4\011\uffe4\023\uffe4\024\047\001" +
    "\002\000\010\005\042\012\035\033\036\001\002\000\006" +
    "\006\044\023\045\001\002\000\030\003\uffd5\006\uffd5\011" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\001\002\000\010\005\042\012\035\033" +
    "\036\001\002\000\014\003\050\006\uffe5\011\uffe5\023\uffe5" +
    "\024\047\001\002\000\010\005\042\012\035\033\036\001" +
    "\002\000\014\003\uffe2\006\uffe2\011\uffe2\023\uffe2\024\uffe2" +
    "\001\002\000\014\003\uffe3\006\uffe3\011\uffe3\023\uffe3\024" +
    "\uffe3\001\002\000\016\003\uffeb\007\uffeb\010\uffeb\012\uffeb" +
    "\021\uffeb\022\uffeb\001\002\000\016\003\uffec\007\uffec\010" +
    "\uffec\012\uffec\021\uffec\022\uffec\001\002\000\010\005\042" +
    "\012\035\033\036\001\002\000\010\005\uffdb\012\uffdb\033" +
    "\uffdb\001\002\000\010\005\uffdd\012\uffdd\033\uffdd\001\002" +
    "\000\014\003\uffdf\006\uffdf\011\uffdf\023\uffdf\024\uffdf\001" +
    "\002\000\010\005\uffd9\012\uffd9\033\uffd9\001\002\000\010" +
    "\005\uffdc\012\uffdc\033\uffdc\001\002\000\010\005\uffd8\012" +
    "\uffd8\033\uffd8\001\002\000\010\005\uffda\012\uffda\033\uffda" +
    "\001\002\000\014\003\uffe0\006\uffe0\011\uffe0\023\uffe0\024" +
    "\uffe0\001\002\000\010\005\042\012\035\033\036\001\002" +
    "\000\006\006\067\023\045\001\002\000\006\003\070\007" +
    "\071\001\002\000\016\003\uffe8\007\uffe8\010\uffe8\012\uffe8" +
    "\021\uffe8\022\uffe8\001\002\000\010\007\015\012\027\021" +
    "\024\001\002\000\004\022\073\001\002\000\004\005\074" +
    "\001\002\000\010\005\042\012\035\033\036\001\002\000" +
    "\006\006\076\023\045\001\002\000\006\003\077\011\100" +
    "\001\002\000\016\003\uffe7\007\uffe7\010\uffe7\012\uffe7\021" +
    "\uffe7\022\uffe7\001\002\000\010\007\015\012\027\021\024" +
    "\001\002\000\006\003\102\010\103\001\002\000\016\003" +
    "\uffe6\007\uffe6\010\uffe6\012\uffe6\021\uffe6\022\uffe6\001\002" +
    "\000\016\003\uffe9\007\uffe9\010\uffe9\012\uffe9\021\uffe9\022" +
    "\uffe9\001\002\000\020\002\ufffa\003\ufffa\007\ufffa\010\ufffa" +
    "\012\ufffa\021\ufffa\022\ufffa\001\002\000\014\003\uffef\007" +
    "\uffef\010\uffef\012\uffef\021\uffef\001\002\000\020\002\ufffb" +
    "\003\ufffb\007\ufffb\010\ufffb\012\ufffb\021\ufffb\022\ufffb\001" +
    "\002\000\010\003\ufff5\011\ufff5\013\ufff5\001\002\000\010" +
    "\003\112\011\113\013\111\001\002\000\004\012\114\001" +
    "\002\000\020\007\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\021\ufff6\001\002\000\020\007\ufff7\012\ufff7\014" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\021\ufff7\001\002\000\010" +
    "\003\ufff4\011\ufff4\013\ufff4\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\015\001\001" +
    "\000\016\004\020\006\024\010\016\011\022\012\025\013" +
    "\027\001\001\000\004\007\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\020\012" +
    "\104\013\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\037\015\040" +
    "\016\033\020\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\042\015\040\016" +
    "\033\020\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\045\016\033\020\036\001\001\000\002\001" +
    "\001\000\006\016\050\020\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\065\015\040\016\033\020\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\020" +
    "\012\071\013\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\074\015\040\016\033\020\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\020\012\100\013\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParserError$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParserError$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParserError$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public int errCount = 0;
   public static void main( String[] args ) {
      try {
		   FileReader file = new FileReader(args[0]);
		   Scanner scanner = new MPLexer( file );
		   MPParserError parser = new MPParserError( scanner );
		   parser.parse();
	  		if (parser.errCount == 0)
				System.out.println("Sintaksna analiza gotova, nema gresaka.");
			else
				System.out.println("Sintaksna analiza gotova, broj gresaka: " + parser.errCount);
   }
	catch( Exception e ) {
	   e.printStackTrace();
	}
   }
   public void syntax_error(Symbol cur_token) {
   	  
   }
   
   public void report_error(String message, Object info) {
   	   System.out.print( message );
   }
   
   public int getLine() {
   	  return (( MPLexer) getScanner()).getLine();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParserError$actions {
  private final MPParserError parser;

  /** Constructor */
  CUP$MPParserError$actions(MPParserError parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParserError$do_action(
    int                        CUP$MPParserError$act_num,
    java_cup.runtime.lr_parser CUP$MPParserError$parser,
    java.util.Stack            CUP$MPParserError$stack,
    int                        CUP$MPParserError$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParserError$result;

      /* select the action based on the action number */
      switch (CUP$MPParserError$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Term ::= OBR Expression CBR 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 32: Term ::= ( Expression )" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Term ::= CONST 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 31: Term ::= CONST" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Term ::= ID 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 30: Term ::= ID" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RelOp ::= GE 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 29: RelOp ::= >=" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RelOp ::= GR 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 28: RelOp ::= >" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RelOp ::= NEQ 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 27: RelOp ::= !=" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RelOp ::= EQ 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 26: RelOp ::= ==" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RelOp ::= LE 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 25: RelOp ::= <=" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RelOp ::= LS 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 24: RelOp ::= <" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RelExpression ::= Term 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 23: RelExpression ::= Term" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RelExpression ::= Term error 
            {
              Object RESULT = null;
		
			System.out.println( "Greska u liniji: " + parser.getLine() + ". Nepravilan uslov" );
			parser.errCount++;
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RelExpression ::= Term RelOp Term 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 22: RelExpression ::= Term RelOp Term" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AndExpression ::= RelExpression 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 21: AndExpression ::= RelExpression" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AndExpression ::= AndExpression error 
            {
              Object RESULT = null;
		
			System.out.println( "Greska u liniji: " + parser.getLine() + ". Nepravilan uslov" );
			parser.errCount++;
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AndExpression ::= AndExpression AND RelExpression 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 20: AndExpression ::= AndExpression && RelExpression" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expression ::= AndExpression 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 19: Expression ::= AndExpression" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expression ::= Expression OR AndExpression 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 18: Expression ::= Expression || AndExpression" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RedoLoop ::= LOOP OBR Expression CBR OCBR Statement REDO OBR Expression CBR SEMIC Statement error 
            {
              Object RESULT = null;
		
			System.out.println( "Greska u liniji: " + parser.getLine() + ". Nedostaje } na kraju loop petlje" );
			parser.errCount++;
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-12)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RedoLoop ::= LOOP OBR Expression CBR OCBR Statement REDO OBR Expression CBR error 
            {
              Object RESULT = null;
		
			System.out.println( "Greska u liniji: " + parser.getLine() + ". Nedostaje ; na kraju redo uslova" );
			parser.errCount++;
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-10)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RedoLoop ::= LOOP OBR Expression CBR error 
            {
              Object RESULT = null;
		
			System.out.println( "Greska u liniji: " + parser.getLine() + ". Greska u telu loop petlje" );
			parser.errCount++;
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RedoLoop ::= LOOP OBR Expression CBR OCBR Statement REDO OBR Expression CBR SEMIC Statement CCBR 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 17: RedoLoop ::= loop ( Expression ) { Statement redo ( Expression ) ; Statement }" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-12)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= Block 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 16: Statement ::= Block" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= ID ASS Expression error 
            {
              Object RESULT = null;
		
			System.out.println( "Greska u liniji: " + parser.getLine() + ". Nedostaje ; na kraju izraza dodele" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= ID ASS Expression SEMIC 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 15: Statement ::= ID = Expression ;" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= RedoLoop 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 14: Statement ::= RedoLoop" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StatementList ::= Statement 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 13: StatementList ::= Statement" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(7/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 12: StatementList ::= StatementList Statement" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(7/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= BOOL 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 11: Type ::= bool" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= FLOAT 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 10: Type ::= float" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= CHAR 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 9: Type ::= char" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INT 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 8: Type ::= int" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NameList ::= NameList COMMA ID 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 7: NameList ::= NameList , ID" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(5/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NameList ::= ID 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 6: NameList ::= ID" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(5/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= Type NameList error 
            {
              Object RESULT = null;
		
			System.out.println( "Greska u liniji: " + parser.getLine() + ". Nedostaje ; na kraju deklaracije promenljivih" );
			parser.errCount++;
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecl ::= Type NameList SEMIC 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 5: VarDecl ::= Type NameList ;" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declarations ::= 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 4: Declarations ::= epsilon" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declarations ::= Declarations VarDecl 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 3: Declarations ::= Declarations VarDecl" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Block ::= OCBR Declarations StatementList error 
            {
              Object RESULT = null;
		
			System.out.println( "Greska u liniji: " + parser.getLine() + ". Nedostaje } na kraju bloka" );
			parser.errCount++;
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Block ::= OCBR Declarations StatementList CCBR 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 2: Block ::= { Declarations StatementList }" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= MAIN OBR CBR error 
            {
              Object RESULT = null;
		
			System.out.println( "Greska u liniji: " + parser.getLine() + ". Greska u telu main funkcije" );
			parser.errCount++;
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= MAIN OBR error 
            {
              Object RESULT = null;
		
			System.out.println( "Greska u liniji: " + parser.getLine() + ". Nedostaje ) nakon main(" );
			parser.errCount++;
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= MAIN error 
            {
              Object RESULT = null;
		
			System.out.println( "Greska u liniji: " + parser.getLine() + ". Nedostaje ( nakon main" );
			parser.errCount++;
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= error 
            {
              Object RESULT = null;
		
			System.out.println( "Greska u liniji: " + parser.getLine() + ". Nedostaje main na pocetku programa" );
			parser.errCount++;
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= MAIN OBR CBR Block 
            {
              Object RESULT = null;
		
			System.out.println( "Smena 1: Program ::= main ( ) Block" );
		
              CUP$MPParserError$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          return CUP$MPParserError$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-1)).value;
		RESULT = start_val;
              CUP$MPParserError$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserError$stack.elementAt(CUP$MPParserError$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParserError$parser.done_parsing();
          return CUP$MPParserError$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

